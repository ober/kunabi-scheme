(import (scheme base)
        (bcaine format)
        (chibi filesystem)
        (chibi json)
        (chibi process)
        (chibi string)
        (chibi temp-file)
        (chibi zlib)
        (scheme file)
        (scheme process-context)
        (scheme red)
        (scheme write)
        (srfi 1)
        (srfi 1)
        (srfi 11)
        (srfi 115)
        (srfi 26)
        (srfi 64)
        )

(define (read-json-gzip file-path)
  (call-with-input-file file-path
    (lambda (in)
      (let* ((bytevector (process-run-bytevector (string-append "gzip -d -c " file-path) in))
             (json-data (json-read bytevector)))
        json-data))))

(define json-gz-regexp '(: (* any) ".json.gz"))

(define (json-gz-file? file-name)
  (regexp-match? (regexp-matches json-gz-regexp file-name)))

(define (walk-directory dir)
  (let loop ((entries (directory-files dir))
             (results '()))
    (for-each
     (lambda (entry)
       (let ((full-path (string-append dir "/" entry)))
         (cond
          ((and (file-exists? full-path)
                (not (member entry '("." ".."))))
           (if (file-directory? full-path)
             (set! results (append results (walk-directory full-path)))
             (if (json-gz-file? entry)
               (set! results (cons full-path results))))))))
     entries)
    results))

(define (ct dir)
  (let ((files (walk-directory dir)))
    (for-each
     (lambda (file)
       (displayln file)
       (let ((json (read-json-gzip file)))
         (for-each
          (lambda (record)
            (let* ((h (alist->hash-table record))
                   (request-id (hash-table-ref h "requestID"))
                   (event-name (hash-table-ref h "eventName"))
                   (user-identity (hash-table-ref h "userIdentity")))
              (displayln request-id " " event-name " " user-identity)))
          (vector->list (assoc json "Records")))))
     files)))

(define (type-of x)
  (cond
   ((procedure? x) 'procedure)
   ((number? x) 'number)
   ((string? x) 'string)
   ((symbol? x) 'symbol)
   ((pair? x) 'pair)
   ((vector? x) 'vector)
   ((port? x) 'port)
   ((boolean? x) 'boolean)
   ((char? x) 'char)
   ((bytevector? x) 'bytevector)
   ((null? x) 'null) ; Empty list
   (else 'unknown)))

(define (displayln x)
  (display x)
  (newline))

(define (process-run-bytevector cmd bvec)
  (call-with-temp-file "bvec"
    (lambda (path out preserve)
      (write-bytevector bvec out)
      (close-output-port out)
      (process->bytevector (append cmd (list path))))))

(ct "/home/user/bench")
